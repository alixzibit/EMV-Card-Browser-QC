using System;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System.Collections.Generic;
using PdfSharp.Pdf.IO;
//using System.Drawing.Common;


namespace EMV_Card_Browser
{
public class ReportGenerator
{
    private readonly string _title;
    private readonly string _userName;
    private readonly IEnumerable<CardRecord> _records; // Assuming CardRecord is the model you're using

    public ReportGenerator(string title, string userName, IEnumerable<CardRecord> records)
    {
        _title = title;
        _userName = userName;
        _records = records;
    }

    public string GenerateReport()
    {
        PdfDocument document = new PdfDocument();
        document.Info.Title = _title;
        PdfPage page = document.AddPage();
        XGraphics gfx = XGraphics.FromPdfPage(page);
        XFont font = new XFont("Segoe UI", 20, XFontStyle.Bold);

        gfx.DrawString(_title, font, XBrushes.Black,
            new XRect(0, 0, page.Width, page.Height),
            XStringFormats.TopCenter);

        font = new XFont("Verdana", 12, XFontStyle.Regular);

        /// Define a rectangle that specifies the area to draw within
        XRect rect = new XRect(20, 50, page.Width - 40, page.Height - 50); // Adjust the rectangle to span almost the entire width and utilize available height

        // Define the string format
        XStringFormat format = new XStringFormat();
        format.Alignment = XStringAlignment.Near; // Left-aligned
        format.LineAlignment = XLineAlignment.Near; // Top-aligned

        double lineHeight = 20;  // or any other value depending on your desired spacing and font size
        XRect rect1 = new XRect(20, 50, page.Width - 40, lineHeight);
        XRect rect2 = new XRect(20, 50 + lineHeight, page.Width - 40, lineHeight);

        gfx.DrawString($"Cards Chip QC report was generated by {_userName}",
            font, XBrushes.Black, rect1, format);

        gfx.DrawString($"and following are the cards which were read and verified to have personalized data:",
            font, XBrushes.Black, rect2, format);


            double tableTop = 100;
        double tableLeft = 20;
        double[] columnWidths = { 65, 180, 130, 50, 140 }; // Adjust as needed
        double rowHeight = 17;

        double currentX = tableLeft;
        double currentY = tableTop;

        string[] headers = { "Card Type", "Cardholder Name", "Card Number", "Expiry", "Timestamp" };

        for (int i = 0; i < headers.Length; i++)
        {
            gfx.DrawRectangle(XPens.Black, currentX, currentY, columnWidths[i], rowHeight);
            gfx.DrawString(headers[i], new XFont("Verdana", 10), XBrushes.Black,
                new XRect(currentX, currentY, columnWidths[i], rowHeight), XStringFormats.Center);
            currentX += columnWidths[i];
        }

        currentY += rowHeight;
        foreach (var record in _records)
        {
            currentX = tableLeft;

            if (currentY + rowHeight > page.Height - tableTop)
            {
                page = document.AddPage();
                gfx = XGraphics.FromPdfPage(page);
                currentY = tableTop;
            }

            string[] data = { record.CardType, record.CardholderName, record.CardNumber, record.ExpiryDate, record.Timestamp.ToString("dd/MM/yyyy HH:mm:ss") };

            for (int i = 0; i < data.Length; i++)
            {
                gfx.DrawRectangle(XPens.Black, currentX, currentY, columnWidths[i], rowHeight);
                gfx.DrawString(data[i], new XFont("Verdana", 10), XBrushes.Black,
                    new XRect(currentX, currentY, columnWidths[i], rowHeight), XStringFormats.Center);
                currentX += columnWidths[i];
            }

            currentY += rowHeight;
        }
        string filename = "CardsQCReport.pdf";
        document.Save(filename);

        return filename;
    }
}
}