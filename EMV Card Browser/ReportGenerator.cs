using PdfSharp;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System;
using System.Collections.Generic;
using System.IO;
//using System.Drawing.Common;


namespace EMV_Card_Browser
{
    public class ReportGenerator
    {
        private readonly string _title;
        private readonly string _userName;
        private readonly string _Reccounter;
        private readonly IEnumerable<CardRecord> _records; // Assuming CardRecord is the model you're using

        public ReportGenerator(string title, string userName, string Reccounter, IEnumerable<CardRecord> records)
        {
            _title = title;
            _userName = userName;
            _records = records;
            _Reccounter = Reccounter;
        }
        private void SetFolderIcon(string folderPath, string iconPath)
        {
            string iniPath = Path.Combine(folderPath, "desktop.ini");

            if (!File.Exists(iniPath))
            {
                using (StreamWriter writer = new StreamWriter(iniPath))
                {
                    writer.WriteLine("[.ShellClassInfo]");
                    writer.WriteLine($"IconResource={iconPath},0");
                    writer.WriteLine("IconFile=" + iconPath);
                    writer.WriteLine("IconIndex=0");
                }

                File.SetAttributes(folderPath, File.GetAttributes(folderPath) | FileAttributes.System);
                File.SetAttributes(iniPath, FileAttributes.Hidden);
            }
        }

        public string GenerateReport()
        {
            PdfDocument document = new PdfDocument();

            PdfPage page = document.AddPage();
            page.Size = PageSize.A4;

            // Manually set the page to landscape
            double width = page.Width;
            page.Width = page.Height;
            page.Height = width;

            XGraphics gfx = XGraphics.FromPdfPage(page);
            XFont font = new XFont("Segoe UI", 20, XFontStyle.Bold);

            gfx.DrawString(_title, font, XBrushes.Black,
                new XRect(0, 0, page.Width, page.Height),
                XStringFormats.TopCenter);

            font = new XFont("Verdana", 12, XFontStyle.Regular);

            /// Define a rectangle that specifies the area to draw within
            XRect rect = new XRect(20, 50, page.Width - 40, page.Height - 50); // Adjust the rectangle to span almost the entire width and utilize available height

            // Define the string format
            XStringFormat format = new XStringFormat();
            format.Alignment = XStringAlignment.Near; // Left-aligned
            format.LineAlignment = XLineAlignment.Near; // Top-aligned

            double lineHeight = 20;  // or any other value depending on your desired spacing and font size
            XRect rect1 = new XRect(20, 50, page.Width - 40, lineHeight);
            XRect rect2 = new XRect(20, 50 + lineHeight, page.Width - 40, lineHeight);

            gfx.DrawString($"Cards Chip QC report was generated by {_userName}",
                font, XBrushes.Black, rect1, format);

            gfx.DrawString($"and following are the cards ({_Reccounter}) which were read and verified to have personalized data:",
                font, XBrushes.Black, rect2, format);


            double tableTop = 100;
            double tableLeft = 20;
            double[] columnWidths = { 30, 75, 180, 130, 60, 140, 90 }; // Adjusted widths
            double rowHeight = 20;

            double currentX = tableLeft;
            double currentY = tableTop;

            string[] headers = { "Sr No", "Card Type", "Cardholder Name", "Card Number", "Expiry", "Timestamp", "Print Status" }; // \n introduces a line break for the header

            for (int i = 0; i < headers.Length; i++)
            {
                gfx.DrawRectangle(XPens.Black, currentX, currentY, columnWidths[i], rowHeight);
                gfx.DrawString(headers[i], new XFont("Verdana", 10), XBrushes.Black,
                    new XRect(currentX, currentY, columnWidths[i], rowHeight), XStringFormats.Center);
                currentX += columnWidths[i];
            }

            currentY += rowHeight;

            foreach (var record in _records)
            {
                currentX = tableLeft;

                if (currentY + rowHeight > page.Height - tableTop)
                {
                    page = document.AddPage();
                    gfx = XGraphics.FromPdfPage(page);
                    currentY = tableTop;
                }

                string[] data = { record.Srno, record.CardType, record.CardholderName, record.CardNumber, record.ExpiryDate, record.Timestamp.ToString("dd/MM/yyyy hh:mm:ss"), "" };

                for (int i = 0; i < data.Length; i++)
                {
                    gfx.DrawRectangle(XPens.Black, currentX, currentY, columnWidths[i], rowHeight);

                    // Word wrapping for "Print Status"
                    if (i == 6)
                    {
                        var stringFormat = new XStringFormat();
                        stringFormat.Alignment = XStringAlignment.Center;
                        stringFormat.LineAlignment = XLineAlignment.Center;
                        gfx.DrawString(data[i], new XFont("Verdana", 10, XFontStyle.Regular), XBrushes.Black, new XRect(currentX, currentY, columnWidths[i], rowHeight), stringFormat);
                    }
                    else
                    {
                        gfx.DrawString(data[i], new XFont("Verdana", 10), XBrushes.Black,
                            new XRect(currentX, currentY, columnWidths[i], rowHeight), XStringFormats.Center);
                    }

                    currentX += columnWidths[i];
                }

                currentY += rowHeight;
            }

            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory);
            string folderName = "EMV Cards QC Reports";
            string folderPath = Path.Combine(desktopPath, folderName);
            string iconPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "reporticon1.ico");
            Directory.CreateDirectory(folderPath);  // This will create the directory if it doesn't exist
            SetFolderIcon(folderPath, iconPath);  // Replace path_to_your_emvico3.ico with the absolute path to your .ico file


            string timestamp = DateTime.Now.ToString("ddMMyy-h.mmtt.ss") + "s";
            string filename = $"CardsQCReport - {timestamp}.pdf";
            string fullPath = Path.Combine(folderPath, filename);
            document.Save(fullPath);

            return fullPath;

        }
    }
}